// Generated by CoffeeScript 2.3.2
var format_date, handle_comment, handle_navbar, handle_smooth, load_relevant_commentaries;

handle_comment = function(form) {
  return form.submit(function(event) {
    var arrayData, jsonData;
    event.preventDefault();
    arrayData = $(this).serializeArray();
    jsonData = {};
    $.each(arrayData, function() {
      return jsonData[this.name] = this.value || '';
    });
    return $.ajax({
      url: "/commentary/comment",
      method: "POST",
      data: JSON.stringify(jsonData),
      dataType: "json",
      success: (function(data) {
        load_relevant_commentaries();
        $(":input").val("");
      }),
      // console.log data
      error: (function(xhr, resp, text) {})
    });
  });
};

// console.log xhr, resp, text
format_date = function(date) {
  var day, important_part, month, month_list, year;
  important_part = date.slice(0, 10);
  year = important_part.slice(0, 4);
  month = important_part.slice(5, 7);
  day = important_part.slice(8, 10);
  // console.log month
  month_list = ["Jan.", "Fev.", "Mar.", "Abr.", "Mai.", "Jun.", "Jul.", "Ago.", "Set.", "Out.", "Nov.", "Dez."];
  return `${day} de ${month_list[Number(month)]} de ${year}`;
};

load_relevant_commentaries = function() {
  return $.ajax({
    url: "/commentary/top",
    method: "GET",
    success: (function(data) {
      var i, item, len, results;
      $("#top-commentaries").text("");
      results = [];
      for (i = 0, len = data.length; i < len; i++) {
        item = data[i];
        results.push($("#top-commentaries").prepend(`<div class="row p-3 pr-5 m-3 text-dark commentary-box">\n	<p class="bg-light pr-4 pl-2 pt-2 pb-3 w-100">\n		${item.Content}\n	</p>\n	<span class="px-1 text-faded">${format_date(item.PostDate)}</span>\n	<span class="ml-auto font-italic font-weight-bold bg-light author-name px-1">${item.Author}</span>\n</div>`));
      }
      return results;
    })
  });
};

// console.log item
$(document).ready(function() {
  handle_smooth($('a[href*="#"]').not('[href="#"]').not('[href="#0"]'));
  handle_comment($("#comment-form"));
  handle_navbar($("#navbarNav"));
  return load_relevant_commentaries();
});

handle_navbar = function(navbar) {
  var navbar_links, section_list, section_names, window_height;
  section_names = navbar.find("a.nav-link");
  navbar_links = {};
  section_list = {};
  window_height = $(window).height();
  console.log(window_height);
  $.each(section_names, function(k, v) {
    var id;
    id = $(v).attr("href");
    navbar_links[id] = v;
    return section_list[id] = $(id);
  });
  return $(document).scroll(function() {
    var page_scroll;
    page_scroll = $(this).scrollTop();
    return $.each(section_names, function(k, v) {
      var id, section_height, section_position;
      id = $(v).attr("href");
      section_position = section_list[id].position().top;
      section_height = section_list[id].height();
      if (page_scroll + window_height / 2 >= section_position && page_scroll < section_position + section_height / 2) {
        return $(navbar_links[id]).addClass("active");
      } else {
        return $(navbar_links[id]).removeClass("active");
      }
    });
  });
};

handle_smooth = function(element) {
  return element.click(function(event) {
    var target;
    // On-page links
    if (location.pathname.replace(/^\//, '') === this.pathname.replace(/^\//, '') && location.hostname === this.hostname) {
      // Figure out element to scroll to
      target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      // Does a scroll target exist?
      if (target.length) {
        // Only prevent default if animation is actually gonna happen
        event.preventDefault();
        return $('html, body').animate({
          scrollTop: target.offset().top
        }, 1000, function() {
          var $target;
          $target = $(target);
          $target.focus();
          if ($target.is(':focus')) {
            // Checking if the target was focused
            return false;
          } else {
            $target.attr('tabindex', '-1');
            // Adding tabindex for elements not focusable
            return $target.focus();
          }
        });
      }
    }
  });
};

// Set focus again
